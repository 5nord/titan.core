/******************************************************************************
 * Copyright (c) 2000-2014 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/
module AttributeTestcases {

import from Functions all;
import from Types all;



//tests in case of no attributes:
//if omit fields do not appear in the encoded text
//if all not omitted field appear in the encoded text
//if all not omitted field value appear in the correct form
testcase tc_NoAttributeOnUpperLevel() runs on MTC {
  var Profile0 p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := omit,
    meetings := omit
  }

  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone_no\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760}}");
  f_check_encoding(encoded:= f_enc_profile0(p), expected := os);
  f_bool2verdict( match(f_dec_profile0(f_enc_profile0(p)), p) );
}

//tests in case of selecting attributes:
//if omit fields appear in the encoded
//if all not omitted field value appear in the correct form
testcase tc_name_as_omit_as_null() runs on MTC {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := omit,
    meetings := omit
  }

  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile(p)), p) );
}

testcase tc_name_as() runs on MTC {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := "bob@ericsson.com",
    meetings := omit
  }
  
  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"email\":\"bob@ericsson.com\",\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile(p)), p) );
}

//tests in case of selecting attributes:
//if omit fields appear in the encoded
//if all not omitted field value appear in the correct form
testcase tc_attribute_compactprint1() runs on MTC {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := omit,
    meetings := omit
  }

  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile_compact(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile_compact(p)), p) );
}

testcase tc_attribute_compactprint2() runs on MTC {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := "bob@ericsson.com",
    meetings := omit
  }
  
  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"email\":\"bob@ericsson.com\",\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile_compact(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile_compact(p)), p) );
}

testcase tc_attribute_compactprintp() runs on MTC {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := "bob@ericsson.com",
    meetings := omit
  }
  
  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"email\":\"bob@ericsson.com\",\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile_compact_p(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile_compact_p(p)), p) );
}


//tests in case of selecting attributes:
//if omit fields appear in the encoded
//if all not omitted field value appear in the correct form
//pretty printing
testcase tc_attribute_prettyprint1() runs on MTC {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := omit,
    meetings := omit
  }

  var octetstring os := char2oct("{\n\t\"name\" : \"Bob\",\n\t\"phone\" : {\n\t\t\"CountryPrefix\" : 6,\n\t\t\"NetworkPrefix\" : 1,\n\t\t\"LocalNumber\" : 3377760\n\t},\n\t\"meetings\" : null\n}");
  f_check_encoding(encoded:= f_enc_profile_pretty(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile(p)), p) );
}

//pretty printing
testcase tc_attribute_prettyprint2() runs on MTC {
  var Profile p := { 
    name := "Bob",
    phone_no := { 6, 1, 3377760 },
    email_addr := "bob@ericsson.com",
    meetings := omit
  }
  
  var octetstring os := char2oct("{\"name\":\"Bob\",\"phone\":{\"CountryPrefix\":6,\"NetworkPrefix\":1,\"LocalNumber\":3377760},\"email\":\"bob@ericsson.com\",\"meetings\":null}");
  f_check_encoding(encoded:= f_enc_profile(p), expected := os);
  f_bool2verdict( match(f_dec_profile(f_enc_profile(p)), p) );
}



testcase tc_attribute_union() runs on MTC {
  var CBA c:= {
   f_val:= 1.75
  }
  var octetstring os := char2oct("{\"float\":1.750000}");
  f_check_encoding(encoded:= f_enc_cba(c) , expected := os);
  f_bool2verdict( match(f_dec_cba(f_enc_cba(c)), c) );
  
  c:= { i_val := -2 }
  os := char2oct("{\"int\":-2}");
  f_check_encoding(encoded:= f_enc_cba(c) , expected := os);
  f_bool2verdict( match(f_dec_cba(f_enc_cba(c)), c) );
  
  c:= { cs_val := "Hello" }
  os := char2oct("{\"string\":\"Hello\"}");
  f_check_encoding(encoded:= f_enc_cba(c) , expected := os);
  f_bool2verdict( match(f_dec_cba(f_enc_cba(c)), c) );
  
  c:= { date_val := {"March",28,Friday} }
  os := char2oct("{\"date\":{\"month\":\"March\",\"day_idx\":28,\"day_name\":\"Friday\"}}");
  f_check_encoding(encoded:= f_enc_cba(c) , expected := os);
  f_bool2verdict( match(f_dec_cba(f_enc_cba(c)), c) );
}

// Encoding unions as JSON values (without the braces and the field name)
// The decoder will attempt to decode each field and the first to successfully decode the value
// will be the selected one (thus the order of the fields is important)
testcase tc_attribute_as_value() runs on MTC {
  var Stuff stuff := { { ival := 18 }, { osval := '1D66FE'O }, { csval := "almafa" }, { bval := true }, { fval := 1.8e-20}, { ucsval := "almácska" }, { bsval := '1101101'B }, { prodval := { name := "Shoe", price := 79.99, code := 'A4C'H } }, { roival := { 1, 3, 3, 7 } }, { prod2val := { "Car", 14000.0, omit } }, { sizeval := Large }, { unival := { hsval := 'EE0'H } }, { unival := { rocsval := { "one", "two", "ten" } } } };

  var octetstring os := unichar2oct("[18,\"1D66FE\",\"almafa\",true,1.800000e-20,\"almácska\",\"1101101\",{\"name\":\"Shoe\",\"price\":79.990000,\"code\":\"A4C\"},[1,3,3,7],{\"name\":\"Car\",\"price\":14000.000000},\"Large\",\"EE0\",[\"one\",\"two\",\"ten\"]]", "UTF-8");
  f_check_encoding(encoded:= f_enc_stuff(stuff) , expected := os);
  f_bool2verdict( match(f_dec_stuff(f_enc_stuff(stuff)), stuff) );
  setverdict(pass);
}

// Testing default values for record fields (decoding only)
testcase tc_attribute_default() runs on MTC {
  var octetstring os := char2oct("{}");
  var RecDef d := { i := -19, f := 1000000.000000, b := false, bs := '101'B, hs := 'DEAD'H, os := '1DE7'O, cs := "empty", ucs := "üres", size := Tiny, vt := fail };
  f_bool2verdict( match(f_dec_def(os), d) );

  os := char2oct("{ \"b\" : null }");
  d.b := omit;
  f_bool2verdict( match(f_dec_def(os), d) );
}


//set


control {
  execute(tc_NoAttributeOnUpperLevel())
  execute(tc_name_as_omit_as_null());
  execute(tc_name_as());
  execute(tc_attribute_compactprint1());
  execute(tc_attribute_compactprint2());
  execute(tc_attribute_compactprintp());
  execute(tc_attribute_prettyprint1());
  execute(tc_attribute_prettyprint2());
  execute(tc_attribute_union());
  execute(tc_attribute_as_value());
  //execute(tc_attribute_default());
}
}
